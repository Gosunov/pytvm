name: Build and upload to PyPI

on: [push, pull_request]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]
        python-version: ["3.9", "3.10", "3.11"]
        include:
          - os: ubuntu-latest
            file: libemulator-linux-x86_64.so
            arch: x86_64
#          - os: windows-2019
#            file: libemulator.dll
#            arch: x86_64
          - os: windows-latest
            file: libemulator.dll
            arch: x86_64
          - os: macos-13
            file: libemulator-mac-x86-64.dylib
            arch: x86_64
          - os: macos-14
            file: libemulator-mac-x86-64.dylib
            arch: arm64

    steps:
      - uses: actions/checkout@v2

      - name: Download prebuilt  # https://github.com/disintar/tonpy/blob/main/.github/workflows/wheels.yml#L108
        run: |
          curl -Lo ./pytvm/engine/${{ matrix.file }} https://github.com/neodix42/ton/releases/latest/download/${{ matrix.file }}

      - uses: actions/checkout@v3
        if: runner.os != 'Linux'

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        if: (matrix.os != 'macos-14') || (matrix.python-version != '3.9')
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Python ${{ matrix.python-version }}
        run: |
          brew install python@3.9
        if: (matrix.os == 'macos-14') && (matrix.python-version == '3.9')

      - name: Build wheels
        run: |
          python${{ matrix.python-version }} -m pip install --upgrade pip
          pip install build wheel
          python${{ matrix.python-version }} -m build --wheel --sdist

      - name: Repair wheels
        if: runner.os == 'Linux'
        run: |
          ls dist
          export FILE=$(pwd)/dist/$(ls dist | grep .whl)
          
          pip install auditwheel
          python3 -m auditwheel show $FILE
          python3 -m auditwheel repair $FILE --plat manylinux_2_27_x86_64

      - uses: actions/upload-artifact@v2
        if: runner.os != 'Linux'
        with:
          path: ./dist/*.whl

      - uses: actions/upload-artifact@v2
        if: runner.os == 'Linux'
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Build sdist
        run: |
          python -m pip install --upgrade pip
          pip install build
          python -m build --sdist

      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
#    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
